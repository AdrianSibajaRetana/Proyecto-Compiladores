@page "/instrucciones"

@using System;
@using System.Linq; 

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">
        Instrucciones entendidas
    </MudText>
    <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">
        El compilador entiende los siguientes lexemas y tokens.
    </MudText>
    <MudSimpleTable Hover="true" Dense="true" FixedHeader="true" Style="height:300px;" Class="mt-8">
        <thead>
            <tr>
                <th>Token</th>
                <th>Lexemas</th>
            </tr>
        </thead>
        <tbody>
            @foreach (KeyValuePair<string, string> pair in tokensYlexemas)
            {
                <tr>
                    <td>@pair.Key</td>
                    <td>@pair.Value</td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
    <MudItem Class="mt-8">
        <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">
            El compilador construye comandos a partir de frases y expresiones.
        </MudText>
        <MudText Typo="Typo.body1" Align="Align.Justify">

            Una <b>frase</b> es el texto digitado por el usuario como entrada, para ser compilado y traducido
            a comandos del lenguaje Javascript.
            El compilador analiza esta frase y la divide en <i>tokens</i> y <b>expresiones</b>. Estas últimas son
            series de <i>tokens</i> que poseen un significado en conjunto para el compilador, es decir, 
            son reconocidas como un grupo y no como <i>tokens</i> aislados.
            Con esto, se pueden compilar frases complejas compuestas de tantas expresiones y <i>tokens</i> como 
            sean necesarios.
        </MudText>
        <MudText Typo="Typo.body1">
            Las expresiones que entiende el compilador son las siguientes: 
        </MudText>
    </MudItem>
    <MudSimpleTable Hover="true" Dense="true" Class="mt-8 mb-16">
        <thead>
            <tr>
                <th>Expresión</th>
                <th>Composición léxica</th>
                <th>Ejemplo</th>
                <th>Comando</th>
            </tr>
        </thead>
        <tbody>
            @foreach (KeyValuePair<string, Composicion> pair in expresiones)
            {
                <tr>
                    <td>@pair.Key</td>
                    <td>@pair.Value.RepresentacionLexica</td>
                    <td>@pair.Value.Ejemplo</td>
                    <td>@pair.Value.Resultado</td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
    <MudItem Class="mt-2">
        <MudText Typo="Typo.body1" Align="Align.Justify">
            Como se muestra en la tabla anterior, se manejan dos expresiones recursivas (es decir, que 
            contienen a otras expresiones dentro de sí mismas) y dos expresiones
            literales. A partir de ellas, se pueden reconocer las siguientes frases y traducirlas a sus respectivos
            comandos:
        </MudText>
    </MudItem>
    <MudSimpleTable Hover="true" Dense="true" FixedHeader="true" Style="height:300px;" Class="mt-8 mb-16">
        <thead>
            <tr>
                <th>Frase</th>
                <th>Composición léxica</th>
                <th>Ejemplo</th>
                <th>Comando</th>
            </tr>
        </thead>
        <tbody>
            @foreach (KeyValuePair<string, Composicion> pair in frasesYRepresentacion)
            {
                <tr>
                    <td>@pair.Key</td>
                    <td>@pair.Value.RepresentacionLexica</td>
                    <td>@pair.Value.Ejemplo</td>
                    <td>@pair.Value.Resultado</td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
</MudContainer>

@code {
    public class Composicion
    {
        public string RepresentacionLexica { get; set; }
        public string Ejemplo { get; set; }
        public string Resultado { get; set; }
        public Composicion(string r, string e, string re)
        {
            RepresentacionLexica = r;
            Ejemplo = e;
            Resultado = re;
        }
    }

    Dictionary<string, string> tokensYlexemas = new() {
        {
            "Operador",
            "[Ss]ume, [Rr]este, [Mm]ultiplique, [Dd]ivida, [Cc]onjuncion, [Dd]isyuncion, [Ii]guales"
        },
        {
            "Operador Unario",
            "[Nn]egar"
        },
        {
            "Comando",
            "[Dd]eclare, [Aa]signe, [Ii]mprima, [Rr]etorne, [Ii]nvoque"
        },
        {
            "Tipo",
            "\"variable\", \"funcion\", \"parametros\""
        },
        {
            "Keyword Asignacion",
            "\"a\""
        },
        {
            "Keyword Parametros",
            "\"con\""
        },
        {
            "Keyword Funcion",
            "\"que\""
        },
        {
            "Keyword Igualdad",
            "[Ss]on"
        },
        {
            "Control",
            "[Ss]i, \"entonces\""
        },
        {
            "Separador",
            "\",\" , \"y\""
        },
        {
            "Terminador",
            "\".\""
        },
        {
            "Literal",
            "[0-9]+(.[0-9]+)?, \".*\", \"true\", \"false\""
        },
        {
            "Id",
            "[a-zA-Z_]+[0-9]*"
        },
    };

    Dictionary<string, Composicion> expresiones = new()
    {
        {
            "Negación de Expresion",
            new Composicion("Operador_Unario EXPRESION", "Negar A", "!A")
        },
        {
            "Operación aritmética",
            new Composicion("Operador EXPRESION Separador EXPRESION", "sume B y C", "B + C")
        },
        {
            "Literal en expresión",
            new Composicion("Literal", "9", "9")
        },
        {
            "ID en expresión",
            new Composicion("Id", "D", "D")
        },

    };


    Dictionary<string, Composicion> frasesYRepresentacion = new()
    {
        {
            "Declaración de variable",
            new Composicion("Comando Tipo Id Terminador", "Asigne variable A.", "let A;")
        },
        {
            "Declarar el resultado de expresión a variable",
            new Composicion("Comando EXPRESIÓN Keyword_asignacion Id Terminador", "Asigne sume B y C a A.", "A = B + C;")
        },
        {
            "Imprimir expresión",
            new Composicion("Comando EXPRESIÓN Terminador", "Imprima B.", "console.log(B)")
        },
        {
            "Control lógico",
            new Composicion("control EXPRESION control [Cualquier Frase] terminador", "Si A entonces imprima B.", "if(A){console.log(B)}")
        },

    };
}
